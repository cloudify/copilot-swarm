[1mdiff --git a/src/MonitorEngine.ts b/src/MonitorEngine.ts[m
[1mindex 91a8e0a..05d030d 100644[m
[1m--- a/src/MonitorEngine.ts[m
[1m+++ b/src/MonitorEngine.ts[m
[36m@@ -34,6 +34,10 @@[m [mexport class MonitorEngine {[m
   private stablePRs: Set<string> = new Set(); // URLs of PRs without recent activity[m
   private fastRefreshInterval: number = 15; // seconds for active PRs (increased from 5)[m
   private slowRefreshInterval: number = 60; // seconds for stable PRs (increased from 30)[m
[32m+[m[41m  [m
[32m+[m[32m  // Session time tracking[m
[32m+[m[32m  private totalSessionTimeMs: number = 0;[m
[32m+[m[32m  private workingPRs: Map<string, Date> = new Map(); // Track when each PR started working[m
 [m
   constructor(options: MonitorEngineOptions) {[m
     this.options = options;[m
[36m@@ -374,6 +378,9 @@[m [mexport class MonitorEngine {[m
       this.lastPullRequestData = webData;[m
       this.server.updatePullRequests(webData);[m
 [m
[32m+[m[32m      // Update session time tracking[m
[32m+[m[32m      this.updateSessionTime(results);[m
[32m+[m
       // Update status bar[m
       const activeCopilot = results.filter([m
         (result) => result.state === "working"[m
[36m@@ -381,6 +388,7 @@[m [mexport class MonitorEngine {[m
       const statusData = {[m
         totalPrs: webData.length,[m
         activeCopilot: activeCopilot,[m
[32m+[m[32m        totalSessionTime: this.formatTotalSessionTime(),[m
         nextRefresh: this.getNextRefreshTime(),[m
         refreshInterval: this.options.interval,[m
       };[m
[36m@@ -474,6 +482,9 @@[m [mexport class MonitorEngine {[m
       this.lastPullRequestData = webData;[m
       this.server.updatePullRequests(webData);[m
 [m
[32m+[m[32m      // Update session time tracking[m
[32m+[m[32m      this.updateSessionTime(results);[m
[32m+[m
       // Update status bar[m
       const activeCopilot = results.filter([m
         (result) => result.state === "working"[m
[36m@@ -481,6 +492,7 @@[m [mexport class MonitorEngine {[m
       const statusData = {[m
         totalPrs: webData.length,[m
         activeCopilot: activeCopilot,[m
[32m+[m[32m        totalSessionTime: this.formatTotalSessionTime(),[m
         nextRefresh: this.getNextRefreshTime(),[m
         refreshInterval: this.slowRefreshInterval,[m
       };[m
[36m@@ -708,4 +720,68 @@[m [mexport class MonitorEngine {[m
     // Return seconds until next refresh for better client-side countdown[m
     return `${this.options.interval}s`;[m
   }[m
[32m+[m
[32m+[m[32m  private formatTotalSessionTime(): string {[m
[32m+[m[32m    if (this.totalSessionTimeMs === 0) {[m
[32m+[m[32m      return "00:00:00";[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    const totalSeconds = Math.floor(this.totalSessionTimeMs / 1000);[m
[32m+[m[32m    const hours = Math.floor(totalSeconds / 3600);[m
[32m+[m[32m    const minutes = Math.floor((totalSeconds % 3600) / 60);[m
[32m+[m[32m    const seconds = totalSeconds % 60;[m
[32m+[m[41m    [m
[32m+[m[32m    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  private updateSessionTime(results: any[]): void {[m
[32m+[m[32m    const now = new Date();[m
[32m+[m[41m    [m
[32m+[m[32m    // Process each PR to track session timing[m
[32m+[m[32m    for (const result of results) {[m
[32m+[m[32m      const prUrl = result.pr.html_url;[m
[32m+[m[41m      [m
[32m+[m[32m      if (result.state === "working") {[m
[32m+[m[32m        // PR is currently working[m
[32m+[m[32m        if (!this.workingPRs.has(prUrl)) {[m
[32m+[m[32m          // PR just started working[m
[32m+[m[32m          this.workingPRs.set(prUrl, now);[m
[32m+[m[32m          this.server.log(`Session started for PR: ${result.pr.title}`);[m
[32m+[m[32m        }[m
[32m+[m[32m        // If already working, add time since last update[m
[32m+[m[32m        else {[m
[32m+[m[32m          const startTime = this.workingPRs.get(prUrl);[m
[32m+[m[32m          if (startTime) {[m
[32m+[m[32m            const timeSinceStart = now.getTime() - startTime.getTime();[m
[32m+[m[32m            // Only add time if this is a reasonable duration (less than 2x refresh interval)[m
[32m+[m[32m            const maxReasonableDuration = this.slowRefreshInterval * 2 * 1000;[m
[32m+[m[32m            if (timeSinceStart <= maxReasonableDuration) {[m
[32m+[m[32m              // Add the elapsed time since we started tracking this session[m
[32m+[m[32m              const sessionDuration = timeSinceStart;[m
[32m+[m[32m              this.totalSessionTimeMs += sessionDuration;[m
[32m+[m[41m              [m
[32m+[m[32m              const sessionMinutes = Math.floor(sessionDuration / 60000);[m
[32m+[m[32m              const sessionSeconds = Math.floor((sessionDuration % 60000) / 1000);[m
[32m+[m[32m              this.server.log(`Ongoing session for PR: ${result.pr.title} (+${sessionMinutes}m ${sessionSeconds}s, total: ${this.formatTotalSessionTime()})`);[m
[32m+[m[32m            }[m
[32m+[m[32m            // Reset the start time to now for next measurement[m
[32m+[m[32m            this.workingPRs.set(prUrl, now);[m
[32m+[m[32m          }[m
[32m+[m[32m        }[m
[32m+[m[32m      } else if (this.workingPRs.has(prUrl)) {[m
[32m+[m[32m        // PR is no longer working and was previously working[m
[32m+[m[32m        // PR just finished working - add the final session time[m
[32m+[m[32m        const startTime = this.workingPRs.get(prUrl);[m
[32m+[m[32m        if (startTime) {[m
[32m+[m[32m          const sessionDuration = now.getTime() - startTime.getTime();[m
[32m+[m[32m          this.totalSessionTimeMs += sessionDuration;[m
[32m+[m[32m          this.workingPRs.delete(prUrl);[m
[32m+[m[41m          [m
[32m+[m[32m          const sessionMinutes = Math.floor(sessionDuration / 60000);[m
[32m+[m[32m          const sessionSeconds = Math.floor((sessionDuration % 60000) / 1000);[m
[32m+[m[32m          this.server.log(`Session completed for PR: ${result.pr.title} (${sessionMinutes}m ${sessionSeconds}s, total: ${this.formatTotalSessionTime()})`);[m
[32m+[m[32m        }[m
[32m+[m[32m      }[m
[32m+[m[32m    }[m
[32m+[m[32m  }[m
 }[m
